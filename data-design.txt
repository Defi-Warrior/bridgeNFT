* Trade's data
tradeId := HASH(formerTradeChainId || formerTradeOperator || alice XOR bob || tradeNonce)
trade :=
    tradeId |
    alice | bob |
    formerTradeChainId | formerTradeOperator |
        assetsAliceOfferForFormerTrade | feeOnAliceForFormerTrade |
        assetsBobOfferForFormerTrade | feeOnBobForFormerTrade |
    latterTradeChainId | latterTradeOperator |
        assetsAliceOfferForLatterTrade | feeOnAliceForLatterTrade |
        assetsBobOfferForLatterTrade | feeOnBobForLatterTrade |
    bothHalfTradesNotValidBefore | formerTradeNotValidAfter | latterTradeNotValidAfter | maxAssetLockFee (in native coin) |
    tradeHasherId |
    aliceSignatureVerifierId | bobSignatureVerifierId | validatorSignatureVerifierId |
    proofVerifierId | statementThatFormerTradeIsFinished |
    proofOfStatement |
    tradeNonce

* Provide:
Alice:
    alice | assetsAliceOfferForFormerTrade | assetsAliceOfferForLatterTrade | aliceSignatureVerifierId (has default)
Bob:
    bob | assetsBobOfferForFormerTrade | assetsBobOfferForLatterTrade | bobSignatureVerifierId (has default)
Alice & Bob negotiate:
    formerTradeChainId | latterTradeChainId | maxAssetLockFee
Validator:
    formerTradeOperator | feeOnAliceForFormerTrade | feeOnBobForFormerTrade |
    latterTradeOperator | feeOnAliceForLatterTrade | feeOnBobForLatterTrade |
    bothHalfTradesNotValidBefore | formerTradeNotValidAfter | latterTradeNotValidAfter |
    tradeHasherId |
    validatorSignatureVerifierId |
    proofVerifierId | statementThatFormerTradeIsFinished |
    proofOfStatement
formerTradeOperator:
    tradeNonce

* Signature:
- Alice (Owner): EOA / contract
"Alice_ConfirmTrade" ||
    tradeId ||
    alice || bob ||
    formerTradeChainId || formerTradeOperator ||
        assetsAliceOfferForFormerTrade || feeOnAliceForFormerTrade ||
        assetsBobOfferForFormerTrade || feeOnBobForFormerTrade ||
    latterTradeChainId || latterTradeOperator ||
        assetsAliceOfferForLatterTrade || feeOnAliceForLatterTrade ||
        assetsBobOfferForLatterTrade || feeOnBobForLatterTrade ||
    bothHalfTradesNotValidBefore || formerTradeNotValidAfter || latterTradeNotValidAfter || maxAssetLockFee (in native coin) ||
    aliceTradeHasherId || aliceSignatureVerifierId

- Bob (Minter/Provider): EOA / contract
"Bob_ConfirmTrade" ||
    tradeId ||
    alice || bob ||
    formerTradeChainId || formerTradeOperator ||
        assetsAliceOfferForFormerTrade || feeOnAliceForFormerTrade ||
        assetsBobOfferForFormerTrade || feeOnBobForFormerTrade ||
    latterTradeChainId || latterTradeOperator ||
        assetsAliceOfferForLatterTrade || feeOnAliceForLatterTrade ||
        assetsBobOfferForLatterTrade || feeOnBobForLatterTrade ||
    bothHalfTradesNotValidBefore || formerTradeNotValidAfter || latterTradeNotValidAfter || maxAssetLockFee (in native coin) ||
    bobTradeHasherId || bobSignatureVerifierId

- Validator: EOA
"Validator_ConfirmTrade" ||
    tradeId ||
    alice || bob ||
    formerTradeChainId || formerTradeOperator ||
        assetsAliceOfferForFormerTrade || feeOnAliceForFormerTrade ||
        assetsBobOfferForFormerTrade || feeOnBobForFormerTrade ||
    latterTradeChainId || latterTradeOperator ||
        assetsAliceOfferForLatterTrade || feeOnAliceForLatterTrade ||
        assetsBobOfferForLatterTrade || feeOnBobForLatterTrade ||
    bothHalfTradesNotValidBefore || formerTradeNotValidAfter || latterTradeNotValidAfter || maxAssetLockFee (in native coin) ||
    aliceTradeHasherId || aliceSignatureVerifierId || aliceSignature ||
    bobTradeHasherId || bobSignatureVerifierId || bobSignature ||
    validatorTradeHasherId ||validatorSignatureVerifierId ||
    proofVerifierId || statementThatFormerTradeIsFinished

* Assets
Asset := {
    TYPE: string, // NATIVE, ERC20, ERC777, ERC721, ERC1155
    ADDRESS: address,
    AMOUNT: uint256,
    TOKEN_ID: bytes,
    TOKEN_DATA: bytes, // URI
    DATA: bytes, // data for minter / ERC receiver,
}

Native
{ AMOUNT, DATA }

ERC20
{ ADDRESS, AMOUNT, DATA }

ERC777
{ ADDRESS, AMOUNT, DATA }

ERC721
{ ADDRESS, TOKEN_ID, TOKEN_DATA, DATA }

ERC1155
{ ADDRESS, TOKEN_ID, AMOUNT, TOKEN_DATA, DATA }

CALL
{ ADDRESS, GAS, PAYLOAD, DATA }
